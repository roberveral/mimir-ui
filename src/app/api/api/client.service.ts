/**
 * OAuth Authorization Server API
 * Definition of the REST API exported by the OAuth Authorization Server.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Client } from '../model/client.model';
import { ClientInput } from '../model/clientInput.model';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ClientService {

    protected basePath = 'http://localhost:8000/v0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Removes the client with the given client_id.
     * This endpoint allows to the client with the given client_id from the Authorization Server. Only the client owner can remove it. 
     * @param clientId Unique client_id associated to the client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClient(clientId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteClient(clientId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteClient(clientId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteClient(clientId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling deleteClient.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiAuthentication) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/clients/${encodeURIComponent(String(clientId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtains all the visible clients registered in the Authorization Server.
     * This endpoint allows to obtain all the clients registered in the Authorization Server which are visible to the user who performs the call, that is, the clients owned (created) by this user. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllClients(observe?: 'body', reportProgress?: boolean): Observable<Array<Client>>;
    public getAllClients(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Client>>>;
    public getAllClients(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Client>>>;
    public getAllClients(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (apiAuthentication) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Client>>(`${this.configuration.basePath}/clients`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtains the client with the given client_id.
     * This endpoint allows to obtain the information about the client registered with the given client_id. It returns the client_secret, so it can be queried after client registration. To ensure that the user has permission to see the client_secret, only the client owner is allowed to query the client information. 
     * @param clientId Unique client_id associated to the client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClient(clientId: string, observe?: 'body', reportProgress?: boolean): Observable<Client>;
    public getClient(clientId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Client>>;
    public getClient(clientId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Client>>;
    public getClient(clientId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling getClient.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiAuthentication) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Client>(`${this.configuration.basePath}/clients/${encodeURIComponent(String(clientId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Registers a new client in the Authorization Server.
     * This endpoint allows to register a new client in the Authorization Server. When the client is registered, random \&quot;client_id\&quot; and \&quot;client_secret\&quot; are generated for the client so it can perform the OAuth Authorization flows. The user who performs the client registration are set as owner, so it&#39;s the only one who can query the client and its associated secret. 
     * @param clientInput Definition of the client to register.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerClient(clientInput: ClientInput, observe?: 'body', reportProgress?: boolean): Observable<Client>;
    public registerClient(clientInput: ClientInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Client>>;
    public registerClient(clientInput: ClientInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Client>>;
    public registerClient(clientInput: ClientInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (clientInput === null || clientInput === undefined) {
            throw new Error('Required parameter clientInput was null or undefined when calling registerClient.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiAuthentication) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Client>(`${this.configuration.basePath}/clients`,
            clientInput,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
